@using Clients.Events;
@inject EventsClient eventsClient;
@inject NavigationManager Navigation
@page "/venues/{id:guid}"
@page "/venues/add"
@rendermode InteractiveServer

<PageTitle>Add Venue</PageTitle>

<h1>Add Venue</h1>

<div class="row g-3">
    <div>
        <label for="venueName" class="form-label">Name</label>
        <input type="text" class="form-control" id="venueName" placeholder="Optus Stadium" @bind="venue!.Name">
        @* <ValidationMessage For="() => venue!.Name" class="text-danger" /> *@
    </div>
    <div class="d-md-flex justify-content-md-end gap-2 d-grid d-md-block">
        <a role="button" class="btn btn-secondary" href="/vanues">Cancel</a>
        <button type="submit" class="btn btn-primary" @onclick=SaveVenue>Save</button>
    </div>
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    public Models.Venue? venue;

    protected override async Task OnInitializedAsync()
    {
        venue = new Models.Venue();
        await Task.CompletedTask;
    }

    private async Task SaveVenue()
    {
        var request = new Clients.Events.Models.CreateVenueRequest { Name = venue!.Name };
        await eventsClient.Api.V1.Venues.PostAsync(request);
        Navigation.NavigateTo("/venues", true);
    }
}
