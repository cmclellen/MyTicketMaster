@using Clients.Events;
@using Clients.Events.Models;
@using MyTicketMaster.Web.Components.Shared;
@inject EventsClient eventsClient;
@page "/events"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Events</PageTitle>

<MyTicketMaster.Web.Components.Shared.PageListingHeader Title="Events" NavigateTo="/events/add" />

@if (events == null)
{
    <Loading />
}
else
{
    <table class="table">
        <thead>
            <tr>
                @* <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th> *@
                <th>Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var eventItem in events)
            {
                <tr>
                    <td>@eventItem.Name</td>
                    <td>
                        <MyTicketMaster.Web.Components.Shared.DeleteRowItem Id="@eventItem.Id!.Value" OnDeleteAsync="DeleteEventAsync" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Clients.Events.Models.EventResponse>? events;

    protected override async Task OnInitializedAsync()
    {
        var eventsResponse = await eventsClient.Api.V1.Events.GetAsync();
        events = eventsResponse!.Items!;//.Select(i => new Event { Name = i.Name }).ToList();
    }

    async Task DeleteEventAsync(Guid eventId)
    {
        await eventsClient.Api.V1.Events[eventId].DeleteAsync();
    }
}
