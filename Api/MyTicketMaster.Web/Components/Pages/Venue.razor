@using Clients.Events;
@using Clients.Events.Models;
@inject EventsClient eventsClient;
@inject ILogger<Venue> Logger
@inject NavigationManager Navigation
@page "/venues"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Venues</PageTitle>

<div class="d-flex flex-wrap flex-sm-nowrap">
    <h1 class="w-100">Venues</h1>
    <div class="flex-grow-1 d-flex justify-content-end align-items-center">
        <div class="flex-grow-1 d-grid d-block">
            <button class="btn btn-primary" @onclick="AddVenue" type="button">Add</button>
        </div>
    </div>
</div>


@if (venues == null)
{
    <MyTicketMaster.Web.Components.Shared.Loading />
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var venue in venues)
            {
                <tr>
                    <td>@venue.Name</td>
                    <td>
                        <a href="javascript: void(0);"
                          @onclick:preventDefault
                          @onclick:stopPropagation                           
                          @onclick="(e) => DeleteVenue(venue.Id)">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private IList<Clients.Events.Models.VenueResponse>? venues = new List<Clients.Events.Models.VenueResponse>();

    protected override async Task OnInitializedAsync()
    {
        var venuesResponse = await eventsClient.Api.V1.Venues.GetAsync();
        venues = venuesResponse!.Items!;
    }

    async Task DeleteVenue(Guid? venueId) {
        await eventsClient.Api.V1.Venues[venueId!.Value].DeleteAsync();
        Navigation.Refresh(true);
    }

    private void AddVenue()
    {
        Navigation.NavigateTo("/venues/95CB36DB-4C9E-4176-8EF4-D6A90AFCC9E6");
    }
}
