@using Clients.Events;
@using Clients.Events.Models;
@inject EventsClient eventsClient;
@inject ILogger<Venue> Logger
@inject NavigationManager Navigation
@page "/venues"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Venues</PageTitle>

<h1>Venues</h1>

<p>Lists all venues.</p>

@if (venues == null)
{
    <MyTicketMaster.Web.Components.Shared.Loading />
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var venue in venues)
            {
                <tr>
                    <td>@venue.Name</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex justify-content-end">
        <button class="btn btn-primary" @onclick="AddVenue">Add</button>
    </div>
}

@code {
    private IList<Clients.Events.Models.VenueResponse>? venues = new List<Clients.Events.Models.VenueResponse>();

    protected override async Task OnInitializedAsync()
    {
        var venuesResponse = await eventsClient.Api.V1.Venues.GetAsync();
        venues = venuesResponse!.Items!;
    }

    private void AddVenue()
    {
        Console.WriteLine("Test");
        Navigation.NavigateTo("/venues/95CB36DB-4C9E-4176-8EF4-D6A90AFCC9E6", forceLoad: true);
    }
}
