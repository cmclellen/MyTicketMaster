@using Clients.Events;
@inject EventsClient eventsClient;
@inject NavigationManager Navigation
@page "/events/{id:guid}"
@page "/events/add"
@rendermode InteractiveServer

<PageTitle>Add Event</PageTitle>

<h1>Add Event</h1>

<div class="row g-3">
    <div>
        <label for="eventName" class="form-label">Name</label>
        <input type="text" class="form-control" id="eventName" placeholder="Counting Crows 2024 Tour" @bind="eventItem!.Name">
        @* <ValidationMessage For="() => venue!.Name" class="text-danger" /> *@
    </div>
    <div class="justify-content-md-end d-grid d-block">
        <button type="submit" class="btn btn-primary" @onclick=SaveEvent>Save</button>
    </div>
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    public Models.Event? eventItem;

    protected override async Task OnInitializedAsync()
    {
        eventItem = new Models.Event();
        await Task.CompletedTask;
    }

    private async Task SaveEvent()
    {
        var request = new Clients.Events.Models.CreateEventRequest { Name = eventItem!.Name };
        await eventsClient.Api.V1.Events.PostAsync(request);
        Navigation.NavigateTo("/events", true);
    }
}
